A **step-by-step process** for setting up AWS Elastic Beanstalk and CodePipeline:

---

### **Step 1: Set Up Elastic Beanstalk**

1. **Log in to AWS Management Console**:
   - Go to [AWS Management Console](https://aws.amazon.com/console/).
   - Sign in with your credentials.

2. **Navigate to Elastic Beanstalk**:
   - In the AWS Management Console, search for **Elastic Beanstalk** in the services search bar.
   - Click on **Elastic Beanstalk**.

3. **Create a New Application**:
   - Click on **Create Application**.
   - Enter a unique name for your application (e.g., `USERID_A_EB`).
   - Click **Create**.

4. **Create an Environment**:
   - After creating the application, click **Create environment**.
   - Select **Web server environment**.
   - Click **Select**.

5. **Configure Environment**:
   - **Platform**: Choose **PHP**.
   - **Presets**: Select **Single instance (using spot instance)**.
   - Click **Next**.

6. **Configure Service Roles**:
   - Under **Existing service roles**, select `s3-Fullroles`.
   - For **EC2 instance profile**, select `s3-Fullroles`.
   - Click **Next**.

7. **Networking Setup**:
   - On the **Setup networking** page, leave all settings as default.
   - Click **Next**.

8. **Configure Root Volume**:
   - Under **Root Volume (Boot Device)**, select **GENERAL PURPOSE 3 (SSD)**.
   - Scroll to the bottom and click **Skip to Review**.

9. **Review and Submit**:
   - Review all the settings.
   - Click **Submit**.
   - Wait 5-10 minutes for the environment to be created.

10. **Verify the Environment**:
    - Once the environment is ready, note the **Domain** displayed on the screen.
    - Click the domain to open the default website.
    - Take a screenshot of the default website and save it as **Screenshot 1**.

---

### **Step 2: Set Up CodePipeline**

1. **Navigate to CodePipeline**:
   - In the AWS Management Console, search for **CodePipeline** in the services search bar.
   - Click on **CodePipeline**.

2. **Create a New Pipeline**:
   - Click **Create pipeline**.
   - Enter a unique name for your pipeline (e.g., `USERID_A_PIPELINE`).
   - Click **Next**.

3. **Configure Source Stage**:
   - Under **Source provider**, select **GitHub (via GitHub App)**.
   - Click **Connect to GitHub**.
   - In the popup window:
     - Create a new GitHub connection with a unique name.
     - Install the GitHub app and authorize it.
   - Return to the pipeline creation window.
   - Under **Connection**, select the newly created GitHub connection.
   - Under **Repository name**, select your repository (e.g., `userid/aws-codepipeline-s3-codedeploy-linux`).
   - Under **Default branch**, select `main`.
   - Click **Next**.

4. **Skip Build and Test Stages**:
   - Click **Skip build stage**.
   - Click **Skip test stage**.

5. **Configure Deploy Stage**:
   - Under **Deploy provider**, select **AWS Elastic Beanstalk**.
   - Select the region where your Elastic Beanstalk environment was created.
   - Under **Application name**, select the application you created earlier (e.g., `USERID_A_EB`).
   - Under **Environment name**, select the environment you created.
   - Click **Next**.

6. **Create Pipeline**:
   - Review all the settings.
   - Click **Create pipeline**.
   - Wait for the pipeline to run. You will see two green ticks on the right side of the page when it completes.

7. **Verify Deployment**:
   - Once the pipeline completes, open the Elastic Beanstalk website URL.
   - Verify that the contents of your GitHub `index.html` are displayed.
   - Take a screenshot and save it as **Screenshot 2**.

---

### **Step 3: Test Automated Pipeline**

1. **Make Changes in GitHub**:
   - Go to your GitHub repository.
   - Edit the `index.html` file (e.g., add content or change colors).
   - Commit the changes.

2. **Check Pipeline Execution**:
   - Return to the CodePipeline page.
   - Observe the pipeline running automatically (look for the two green ticks).
   - Once the pipeline completes, refresh the Elastic Beanstalk website.
   - Verify that the changes are visible.

---

## Conclusion

This setup demonstrates the power of AWS Elastic Beanstalk and CodePipeline in automating web application deployments. By integrating GitHub as the source, changes can be deployed seamlessly to the live environment.
```

